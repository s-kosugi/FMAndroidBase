/*==============================================================================*/
/*																				*/
/*	@file title	:	IStage.cpp													*/
/*  @brief		:	敵ベースクラス												*/
/*	@written	:	s.kosugi													*/
/*	@create		:   2020/06/16													*/
/*																				*/
/*==============================================================================*/

#include "IStage.h"
#include "cGame.h"
#include "..\Player\cPlayer.h"

#ifdef DEBUG
#include "DebugFunc/cDebugFunc.h"
#endif

//==========================================================================================
// 定数
//==========================================================================================


//==========================================================================================
// コンストラクタ
//==========================================================================================
IStage::IStage(IBaseObject * parent, const std::string object_name, const std::string graphic_file_name)
	: cSpriteObject(parent, object_name, graphic_file_name)
	, m_fDist( 32.0f )
{
}

//==========================================================================================
// デストラクタ
//==========================================================================================
IStage::~IStage(void)
{
}
//==========================================================================================
// 初期化
//==========================================================================================
void IStage::Initialize(void)
{
	Initialize({ 0.0f,0.0f });
}
//==========================================================================================
// 初期化
//==========================================================================================
void IStage::Initialize(const cVector2 & pos)
{
	m_vPos = pos;

	cSpriteObject::Initialize();
}

//==========================================================================================
// 更新
//==========================================================================================
void IStage::Update(void)
{
#ifdef DEBUG
	// 当たり判定の描画
	cDebugFunc::GetInstance().RegistDrawCircle(m_vPos, m_fDist, 0x77ff0000);
#endif
	// プレイヤーとの当たり判定チェック
	CheckPlayerHit();

	cSpriteObject::Update();
}

//==========================================================================================
// 破棄
//==========================================================================================
IBaseObject* IStage::Finalize(void)
{
	cSpriteObject::Finalize();
	return this;
}
//==========================================================================================
// プレイヤーとの当たり判定
//==========================================================================================
void IStage::CheckPlayerHit(void)
{
	cPlayer* player = (cPlayer*)GetParent()->FindSibling("Player");
	if (player && player->GetState() == cPlayer::STATE::NORMAL &&
		player->GetDist() + GetDist() > m_vPos.CalcTwoPointDist(player->GetPos()) )
	{
		HitPlayer();
	}
}
//==========================================================================================
// プレイヤーに当たった時の処理
//==========================================================================================
void IStage::HitPlayer(void)
{
}
